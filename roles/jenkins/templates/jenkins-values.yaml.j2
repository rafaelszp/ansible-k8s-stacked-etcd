Master:
  # ImageTag: "2.141"
  ImageTag: {{JENKINS_VERSION}}
  ServiceType: NodePort
  NodePort: {{JENKINS_NODEPORT}}

  UseSecurity: true
  AdminUser: {{JENKINS_ADMIN_USR}}
  AdminPassword: {{JENKINS_ADMIN_PWD}}
  JenkinsAdminEmail: {{JENKINS_ADMIN_EMAIL}}
  NodeSelector:

    {% for nodesel in NODE_SELECTORS %}
      {{nodesel}}
    {% endfor %}

  InstallPlugins:
    
    {% for plugin in JENKINS_PLUGINS %}
    - "{{plugin}}"
    {%endfor%}

  ScriptApproval:
    - method groovy.json.JsonSlurperClassic parseText java.lang.String
    - method java.util.Collection toArray
    - method org.jenkinsci.plugins.workflow.support.actions.EnvironmentAction getEnvironment
    - new groovy.json.JsonSlurperClassic
    - staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods first java.lang.Object[]
    - staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods leftShift java.util.Map java.util.Map
    - staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods split java.lang.String
    - staticMethod org.kohsuke.groovy.sandbox.impl.Checker checkedCall java.lang.Object boolean boolean java.lang.String java.lang.Object[]
    - staticMethod org.kohsuke.groovy.sandbox.impl.Checker checkedGetProperty java.lang.Object boolean boolean java.lang.Object

  InitScripts:
    JobRelationshipManager: |-
      import jenkins.model.Jenkins
      import org.jenkinsci.plugins.workflow.job.WorkflowJob
      import hudson.plugins.git.GitSCM
      def jobs = hudson.model.Hudson.instance.getAllItems(org.jenkinsci.plugins.workflow.job.WorkflowJob)*.fullName
      if('JobRelationshipManager' in jobs) {
        println 'JobRelationshipManager already defined'
      } else {
        WorkflowJob job = Jenkins.instance.createProject(WorkflowJob, 'JobRelationshipManager')
        GitSCM scm = new GitSCM("/code/jobrm/websiteui")
        
        def flowDefinition = new org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition(scm, "Jenkinsfile.local")
        job.definition = flowDefinition
        Jenkins.instance.reload()
      }
Agent:
  Enabled: true
  ImageTag: alpine
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "1024Mi"
  volumes:
    - type: HostPath
      hostPath: /dados/jenkins
      mountPath: /code
    - type: HostPath
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock

rbac:
  install: true

Persistence:
  ExistingClaim: jenkins-pvc
  volumes:
    - name: source-code
      hostPath: 
        path: {{JENKINS_HOME}}
  mounts: 
    - mountPath: /code
      name: source-code